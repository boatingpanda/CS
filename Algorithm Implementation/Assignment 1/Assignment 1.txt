Assignment 1

Due: January 24, 2014 @ 11:59PM

 

This warm up exercise is intended to introduce you to the author’s utilities and data structures including

    StdIn (to read data from the standard input device) 
    In (to read data from an input file)
    StdOut (to output to the console)
    Stopwatch (to time sections of your code)
    Bag (to hold a collection of objects)
    TST (to hold any form of dictionary, see pages 746-752)

You are NOT ALLOWED to use the Scanner, PrintWriter, File or any data structure in the package java.util. You are restricted to the items in the bullet-list above.

 

Write a program to solve word-searching puzzles, where words from a dictionary are to be found in a two-dimensional array of letters.
For example, you might be given the following array:

 M V J L I X A P E

 J H B X E E N P P

 H K T T H B S W Y

 R W A I N U Y Z H

 P P F X R D Z K Q

 T P N L Q O Y J Y

 A N H A P F G B G

 H X M S H W Y L Y

 U J F J H R S O A
 

Your program is to find words from the dictionary that can be spelled out in the puzzle by starting at any character,
then moving in a straight line up, down, left, right, or on any of the four diagonals.
For example, the above array contains the word ALGORITHM because it can be spelled out by starting the lower right corner and moving up and to the left and it contains the word
SYZYGY because it can be spelled out by starting at the son the third row and moving down.

 M V J L I X A P E

 J H B X E * N P P

 H K T T H B S W Y

 R W A * N U Y Z H

 P P F X R D Z K Q

 * P N L Q O * J Y

 A N H A P F G B G

 H X M S H W Y L Y

 U J F J H R S O A
 

In the modified version of the original board, the wildcard character * is present and represents any letter.
This board produces a list of words that includes all those generated by the original board but even more.


The purpose of this assignment is to give you more experience working with strings and to give you an opportunity to put to work the algorithms design skills that
you are learning to implement an exhaustive search. Be sure to thoroughly document your code. For consistency, consider only words that are four or more letters long,
and use the following input format: from standard input, read the integer N, then N lines of N characters each.

 
5

R D R M T 

B O A S Z 

B R P E E 

C P E E R 

L W N S O

 

See CourseWeb for some additional data files, a sample run, and the dictionary.

Notes:

Your assignment is to implement this variation of a Word Search game in the following way:

 

1) To execute your program, enter the following at the command prompt (here are some valid forms). Note: there are four switches:
-help, -dict, -board, and -cols.

        $ java WordSearchGame

        $ java WordSearchGame  -dict dict8.txt

 
$ java WordSearchGame  -dict dict8.txt    -board data2.txt

 
$ java WordSearchGame  -board data2.txt

$ java WordSearchGame -dict dict8.txt    -board data2.txt   -cols  3

2) Read a dictionary of words in from a file and form a TST of all these words. The file will contain ASCII strings, one word per line.
(Note: Some commonly used words, especially plurals and various tenses of words, are NOT in this file – this is ok). 

3) Play the game until the user wants to quit (or until there are no more "boards").

 

Play details for each board:

a) Read in a new "board" from a text file. First read an integer N that represents the number of rows and columns of the game board. Secondly,
read in the two-dimensional array of characters. Wild card characters will be represented with the asterisk character '*'. 

b) Compute all possible words found in the board and place them into a separate game dictionary. This will involve an exhaustive search of the board.
This search is exponential and could take quite a bit of time if we considered all possible words of up to N characters. However, to save time and space,
we will limit words to 10 characters maximum. Take this into account to speed up your search. Each potential word is checked with the dictionary TST, and placed into the game TST
if it is found (note: do not insert duplicates -- this will greatly waste space since you will likely find many words more than once).

 

c) Allow the user to type words from the keyboard and tell him/her if each word is "valid" or not. Typed in words are checked from the game TST.
The user may continue to guess until he/she enters a sentinel value (giving up). The player’s score (number of found words) is to be displayed.

 

d) Show the user all of the words for the board by printing out all of the words in the game TST. This can be done using an organized traversal of the game TST
(alternatively, when building the game TST, you can also keep a Bag of unique words – however that Bag should ONLY be used here, NOT for checking words in part c) above).

•      The dictionary files are in lowercase, while the board files are in uppercase. This is fine – your program should be case insensitive
(i.e. it should consider lower and uppercase versions of the same letter to be the same). If no dictionary is specified via switch -dict use dict10.txt by default.
If no board is specified using the switch -board enter the board from the keyboard. If no cols is specified via the -cols switch used six columns to display all words found in
the board. If the -help switch is used as

$ java WordSearchGame  -help

Welcome to WORD SEARCH!  Run with "-help" for cmd-line options.
Options:
 "-board FILENAME": Specifies game board file.
 "-dict FILENAME":  Specifies dictionary file.
 "-cols NUMCOLS": Specifies the number of columns for printing words.

 

Program submission:

    To submit your solution, click the link (name of this assignment), a window will open allowing a file to be uploaded to CourseWeb.
    You are limited to up to two submissions to CourseWeb. So, submit early enough to meet the deadline but make sure what you submit is executable as a collection of files.
    Submit a zip-file containing all files source files including any utilities programs and any data files provided. All files must be compiled so the TA can execute your program as is. If you fail to provide all the necessary files or fail to compile even one file for a successful execution of your program your program will earn a zero (so be careful!).

Grading rubric:

    Detect -help switch and produce appropriate output. (5 points)
    Time/print reading dictionary from disk to Bag. (7.5 points)
    Time/print moving dictionary from Bag to dictionary TST. (7.5 points)
    Read/print board. (10 points)
    Time/find  all words in game board, place them into game TST. (30 points)
        Implement wildcard feature. (20 points)
        Print all words in specified number of columns via the -cols switch. (15 points)
    Play game
        Allow user to enter one word after another that user thinks is on the board. Print response (see sample run). (20 points)
        Print all words user found in board and the percentage of words found. (10 points)
    Documentation. (10 points)
    Do not use anything other than StdIn, StdOut, In, Stopwatch, Bag and TST. (10 points)
    Restart game upon user request. (5 points)

 
Sample runs: 1, 2
Dictionaries: 1, 2
